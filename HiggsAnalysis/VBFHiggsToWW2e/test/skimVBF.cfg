process skimVBF = {


#  include "FWCore/MessageLogger/data/MessageLogger.cfi"
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"
include "PhysicsTools/HepMCCandAlgos/data/genCandidates.cfi"
include "PhysicsTools/HepMCCandAlgos/data/genParticleCandidatesFast.cfi"
include "PhysicsTools/RecoCandAlgos/data/allTracks.cfi"
include "Configuration/EventContent/data/EventContent.cff"
//include "EgammaAnalysis/ElectronIDProducers/data/electronId.cfi"
include "HiggsAnalysis/VBFHiggsToWW2e/data/allEleIds.cfi"

# ---- input files ---------------------------------------


source = PoolSource 
{ 
  untracked vstring fileNames = 
    {
      "/store/mc/2007/10/19/CSA07-H160_WW_2l-1192836764/0000/FED6C748-0B8B-DC11-A5D9-001617E30CC8.root"
    } 
}

untracked PSet maxEvents = {untracked int32 input = 100}
untracked PSet options = { untracked bool wantSummary = true }


# ----   keep the logging output to a nice level ------------


service = MessageLogger {}


# ---- filtering the VBF part of the signal -------------------


module my_VBFProcessFilter = VBFProcessFilter
  {
    InputTag jetInputTag = iterativeCone5CaloJets
    double jetEtaMax = 5
    double jetPtMin = 15 # GeV
    double tagJetsDeltaEtaMin = 3
    double tagJetsDeltaEtaMax = 10
    double tagJetsInvMassMin = 400 # GeV
    double tagJetsInvMassMax = 1000 # GeV
    bool checkOpposite = false
  }


# ---- look for at least two leptons in the event -------------------


module leptonsNumberFilter = VBFLeptonsNumFilter
  {
    InputTag GSFInputTag  = pixelMatchGsfElectrons
    InputTag muInputTag = muons
    bool useEleId = false
    InputTag eleIDInputTag = electronId
    int32 minLeptonsNum = 2
    int32 maxLeptonsNum = 10 # very big
    double eleEtaMax = 10 # very big
    double elePtMin = 0
    double muEtaMax = 10
    double muPtMin = 0
  }


# ---- jet veto filter -----------------------------------


module jetVeto = VBFJetVetoFilter
  {
    InputTag jetInputTag  = iterativeCone5CaloJets
    double jetEtaMax = 1.5
    double jetPtMin = 15 # GeV
  }


# ---- cloning the tag jets into the event --------------------


module tagJets = VBFJetTagger
  {
    InputTag jetInputTag  = iterativeCone5CaloJets
    string tagJetsName = "tagJets"
    double jetEtaMax = 5
    double jetPtMin = 15 # GeV
    double gatherConeSize = 0.1
  }


# ---- simple cloning the tag jets into the event --------------------


module simpleTagJets = VBFJetTagSelector
  {
    InputTag src  = iterativeCone5CaloJets
    double jetEtaMax = 5
    double jetPtMin = 15 # GeV
    bool filter = false
  }


# ---- electrons ambiguity resolution from FakeRate --------------------


  module refResolver = AmbResolverRef {
    InputTag src = pixelMatchGsfElectrons
    bool filter = false
 }


# ---- electrons track isolation from FakeRate --------------------


module reftkisolation = TkIsoRef 
  {
    InputTag src = pixelMatchGsfElectrons
    string tracks = "ctfWithMaterialTracks"
    double radiusConeExt = 0.2
    double radiusConeInt = 0.015
    double pTMin = 1.5 
    double lip = 0.1
    double cut = 0.1
    bool filter = false
  }


# ---- electrons hadronic isolation from FakeRate --------------------


module refhadisolation = HadIsoRef 
  {
    InputTag src = pixelMatchGsfElectrons
    string hcalrhits = "hbhereco"
    double radiusConeExt = 0.2
    double radiusConeInt = 0.
    double eTMin = 0.5
    double cut = 0.1
    bool filter = false
  }


# ---- saving the ouptut --------------------------------------


module saving = PoolOutputModule
  {
    untracked string fileName = "VBFskim.root"
    untracked vstring outputCommands =
      {
        "drop *",
        "keep edmTriggerResults_TriggerResults__HLT",
        "keep *_genParticleCandidates_*_*",
//        "keep *_source_*_*",
        "keep *_pixelMatchGsfElectrons_*_*",
        "keep *_iterativeCone5CaloJets_*_*",
        "keep *_muons_*_*",
        "keep *_met_*_*",
        "keep *_electronId_*_*",
        "keep *_*_*_skimVBF"
      }
    # select only the VBF events  
//    untracked PSet SelectEvents = 
//      {
//        vstring SelectEvents = { "filtering" }
//      }
  }


# ---- analysis paths --------------------------------------


//  path filtering = {my_VBFProcessFilter, leptonsNumberFilter}
  path analysis = {allEleIds & 
                   refResolver & reftkisolation & refhadisolation}
  endpath save = {saving}


} # process skimVBF
