#! /usr/bin/python
import os
import sys
import getopt
import time

#----------------------------------------------------------------------

def printHeader(file_out):
    print >> file_out,"# original version produced by " + os.path.basename(sys.argv[0]) + " on " + time.asctime()
    print >> file_out,"# command:" + os.path.basename(sys.argv[0]) + " " + " ".join(sys.argv[1:])
    print >> file_out

#----------------------------------------------------------------------
# main
#----------------------------------------------------------------------

usage = """
********************
****** Usage: ******

jobMaker [options]



**********************
****** Options: ******

--task                                     choose between LHE2EDM or EDM2NTUPLE
--name=        [def: \"LHE2EDM\"]            name of the job and directory
--events=      [def: -1]                   number of events to process
--globaltag=   [def: \"START53_V7F::All\"]   change globaltag
--inputfile=                               name of the input file to process
--outputdir=   [def: ./]                   output dir in the storage element
"""


# default selection
task = ""
name = "LHE2EDM"
events = -1
globaltag = "START53_V7F::All"
inputfile=""
outputdir="./"
queue="8nh"

(opts, args) = getopt.getopt(sys.argv[1:], '', ['task=', 'name=', 'events=', 'globaltag=', 'inputfile=', 'outputdir=', 'queue=', 'help'])

for opt,argm in opts:
    if (opt == "--help"):
        print '%s' % (usage)
        sys.exit(0)
    elif (opt == "--task"):
        task = argm
    elif (opt == "--name"):
        name = argm        
    elif (opt == "--events"):
        events = int(argm)
    elif (opt == "--globaltag"):
        globaltag = argm
    elif (opt == "--inputfile"):
        inputfile = argm
    elif (opt == "--outputdir"):
        outputdir = argm
    elif (opt == "--queue"):
        queue = argm
    else:
        print 'Wrong options: %s' % (opt)
        sys.exit(3)
        
#if (name == ""):
#    parts = datasetpath.split("/")
#    name = parts[1]+"_"+parts[2]


if (not (task == "LHE2EDM" or task == "EDM2NTUPLE")):
    print "WARNING: unknown task specified. Exiting now..."
    sys.exit(3)
if (globaltag == "START53_V7F"):
    print "WARNING: you are using default GLOBAL-TAG, it may not be correct."
if (inputfile == ""):
    print "WARNING: lhe file not provided. Exiting now..."
    sys.exit(3)
if (outputdir == "./"):
    print "WARNING: using ./ as output directory."
    


if (task == "LHE2EDM"):
    file = open("../test/LHE2EDM_template_cfg.py")
elif (task == "EDM2NTUPLE"):
    file = open("../test/LHE_PYTHIA6_Tauola_H_gg_8TeV_NTUPLE_template_cfg.py")

lines = file.readlines()
file.close()
if (not os.path.exists("../test")):
    os.mkdir("../test")
if (not os.path.exists("../test/jobs/")):
    os.mkdir("../test/jobs/")
if (not os.path.exists("../test/jobs/"+name)):
    os.mkdir("../test/jobs/"+name)

file_out_name = "../test/jobs/" + name + "/" + task + "_cfg.py"
if (os.path.exists(file_out_name)):
    print "WARNING: job cfg file already exists. Exiting now..."
    sys.exit(3)
file_out = open(file_out_name, "w")

printHeader(file_out)

for line in lines:
    if ("EVENTS" in line):
        file_out.write(line.replace("EVENTS", str(events)))
    elif ("GLOBALTAG" in line):
        file_out.write(line.replace("GLOBALTAG", str(globaltag)))
    elif ("INPUTFILE" in line):
        file_out.write(line.replace("INPUTFILE", str(inputfile)))
    elif ("OUTPUTFILE" in line and task == "LH2EDM"):
        file_out.write(line.replace("OUTPUTFILE", str(outputdir)+"/"+str(name)+"_EDM.root"))
    elif ("OUTPUTFILE" in line and task == "EDM2NTUPLE"):
        file_out.write(line.replace("OUTPUTFILE", str(outputdir)+"/"+str(name)+"_NTUPLE.root"))
    else:
      file_out.write(line)
      
file_out.close()




if (task == "EDM2NTUPLE"):
    bfile_out_name = "../test/jobs/" + name + "/bjob_" + task + ".sh"
    bfile_out = open(bfile_out_name, "w")
    os.chmod(bfile_out_name, 0755)    
    
    curr_dir = os.getcwd()+"/"
    print >> bfile_out, "pwd"
    print >> bfile_out, "cd " + str(curr_dir)
    print >> bfile_out, "pwd"
    print >> bfile_out, "eval `scramv1 runtime -sh`"
    print >> bfile_out, "cmsRun " + file_out_name
    print >> bfile_out
    
    bfile_out.close()

    print "bsub -q " + queue + " -cwd " + curr_dir + "../test/jobs/"+name + "/ " + curr_dir + "/" + bfile_out_name
